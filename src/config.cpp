/**
 * @file config.cpp
 * @brief Implementation of system configuration and device identification
 * 
 * This file implements device ID generation functions that create unique identifiers
 * based on the ESP32's hardware MAC addresses. It provides both full MAC-based and
 * shortened device ID generation methods.
 */

#include <config.h>
#include <Arduino.h>

// Global device ID storage
char device_id[MAX_DEVICE_ID_CHARS] = {0};

/**
 * @brief Generate a full device ID using complete eFuse MAC address (DEPRECATED)
 * 
 * This function generates a device ID using the full eFuse MAC address from the ESP32.
 * It includes the OUI (Organizationally Unique Identifier) vendor ID of the Ethernet MAC.
 * This method is deprecated in favor of generateDeviceID() which produces shorter,
 * more manageable device IDs.
 * 
 * Format: DEVICE_ID_PREFIX + high32bits + low32bits (in hex)
 * Example: "EKEPC2-DDS238_A1B2C3D4E5F6G7H8"
 * 
 * @deprecated Use generateDeviceID() instead for shorter device IDs
 */
void generatefullDeviceID() {
    // Extract 64-bit eFuse MAC address and split into 32-bit components
    uint32_t low = ESP.getEfuseMac() & 0xFFFFFFFF;
    uint32_t high = (ESP.getEfuseMac() >> 32) & 0xFFFFFFFF;
    
    // Generate device ID with full MAC address
    sprintf(device_id, "%s%X%X", DEVICE_ID_PREFIX, high, low);
    
    Serial.printf("Config: Generated full device ID: %s\n", device_id);
}

/**
 * @brief Generate a compact device ID using WiFi MAC address
 * 
 * Creates a unique device identifier using only the last 3 bytes of the WiFi station
 * MAC address. This provides sufficient uniqueness for most applications while keeping
 * the device ID manageable in length.
 * 
 * The function reads the WiFi station MAC address and uses bytes 3, 4, and 5
 * (the device-specific portion, excluding the OUI) to create the identifier.
 * 
 * Format: DEVICE_ID_PREFIX + last3bytes (in hex, uppercase)
 * Example: "EKEPC2-DDS238_A1B2C3"
 * 
 * MAC Address Structure:
 * - Bytes 0-2: OUI (Organizationally Unique Identifier) - manufacturer specific
 * - Bytes 3-5: Device specific - used for device ID generation
 */
void generateDeviceID() {
    uint8_t mac[6];
    
    // Read WiFi station MAC address
    esp_read_mac(mac, ESP_MAC_WIFI_STA);
    
    // Generate device ID using last 3 bytes of MAC (device-specific portion)
    sprintf(device_id, "%s%02X%02X%02X", DEVICE_ID_PREFIX, mac[3], mac[4], mac[5]);
    
    Serial.printf("Config: Generated device ID: %s (from MAC: %02X:%02X:%02X:%02X:%02X:%02X)\n",
                 device_id, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
}

/**
 * @brief Get the current device ID string
 * 
 * Returns a pointer to the device ID string that was generated by either
 * generateDeviceID() or generatefullDeviceID(). The device ID must be
 * generated first before calling this function.
 * 
 * @return Pointer to null-terminated device ID string
 * @note The returned pointer is valid until the next device ID generation
 */
const char* getDeviceID() {
    return (const char*)device_id;
}
